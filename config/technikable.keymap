/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define QWERTY_BASE 1
#define TBLE_ORTHO   true// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt {
    quick_tap_ms = <200>;
};

#define BT(n) BT_SEL n



/ {
    chosen {
        zmk,matrix_transform =
            #ifdef TBLE_DUAL_2U,
            &dual_2u_transform;

        #elif

        defined(TBLE_MIT)
                       &mit_transform;
#

        else

        &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV_L NUM_L>;
            then-layer = <SYM_L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
   &kp ESC   &kp Q             &kp W         &kp E             &kp R      &kp T      &kp Y   &kp U      &kp I    &kp O     &kp P    &kp BACKSPACE
   &kp TAB   &kp A             &kp S         &kp D             &kp F      &kp G      &kp H   &kp J      &kp K    &kp L  &kp SEMI        &kp ENTER
 &kp LSHFT   &kp Z             &kp X         &kp C             &kp V      &kp B      &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                    &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp SPACE  &kp SPACE   &kp B      &kp J    &kp L
            >;
        };

        Nav {
            label = "Nav";
            bindings = <
 &bt BT_CLR     &trans     &trans     &trans     &trans     &trans  &trans    &trans     &trans     &trans    &trans  &kp DEL
     &trans     &trans     &trans     &trans     &trans     &trans  &trans  &kp LARW   &kp DARW   &kp UARW  &kp RARW   &trans
     &trans  &bt BT(0)  &bt BT(1)  &bt BT(2)  &bt BT(3)  &bt BT(4)  &trans  &kp HOME  &kp PG_DN  &kp PG_UP   &kp END   &trans
                           &trans     &trans     &trans     &trans  &trans    &trans     &trans     &trans
            >;
        };

        Num {
            label = "Num";
            bindings = <
 &trans   &kp LBKT  &kp N7  &kp N8  &kp N9   &kp RBKT  &kp C_PREV  &trans  &trans  &trans  &trans  &trans
 &trans  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp EQUAL  &kp C_NEXT  &trans  &trans  &trans  &trans  &trans
 &trans  &kp GRAVE  &kp N1  &kp N2  &kp N3   &kp BSLH      &trans  &trans  &trans  &trans  &trans  &trans
                    &trans  &kp N0  &trans     &trans      &trans  &trans  &trans  &kp N0
            >;
        };

        Sym {
            label = "Sym";
            bindings = <
 &trans   &kp LBRC  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)      &kp RBRC  &trans  &trans  &trans      &trans  &trans  &trans
 &trans  &kp COLON  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)      &kp PLUS  &trans  &trans  &trans      &trans  &trans  &trans
 &trans  &kp TILDE  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(BSLH)  &trans  &trans  &trans      &trans  &trans  &trans
                        &trans  &kp LS(N0)      &trans        &trans  &trans  &trans  &trans  &kp LS(N0)
            >;
        };
    };
};
